{
  title: Using Phoenix Webframework as static content generator
  pars: [
    {
      text: """
            |## Introduction ##
            |
            |Phoenix is not only an excellent web framework, but also it can be transformed with a few steps into a
            |static content generator. You need some programming knowledge, so this way is
            |rather something for developers.
            |
            |Usually a static content generator is a system that reads a text document with a few
            |meta-information such as author, date, title and a markdown block to produce
            |HTML files, which can be uploaded to a web server.
            |
            |There are a lot of existing solutions for this, so why would you create a new system
            |develop? Let's take a look at the current limits and how we could remove them.
            |
            |### Text documents ###
            |The content for the site generator comes from a text document. Usually, the
            |structure of a document is rigid and simple: a text file describes few elements:
            |
            |* title
            |* date
            |* text header
            |* markdown block
            |
            |The elements are separated by a sequence of chars like `============`.
            |
            |What if you have several different structures? For example, a left and right side?
            |Several pictures per paragraph? Where can these elements be placed? For such situations
            |the simple text file is no longer sufficient, because it contains only a simple flat data structure
            |like a list of contents, where the position is used to determind the type (title, date, header, content)
            |of the content.
            |
            |You could use JSON or XML files instead of the text file.
            |But these are usually more complex with a text editor than a simple text file.
            |Fortunately there is a solution [HOCON](https://github.com/lightbend/config/blob/master/HOCON.md),
            |which we're going to take a closer look at now.
            |
      """
      images: [
      ]
    },
    {
      text: """
            |## HOCON - Human-Optimized Config Object Notation ##
            |
            |This text format is a superset of JSON, with the format designed for the human user.
            |HOCON is therefore not generated by programs, but is only written by the user.
            |The syntax is user friendly, you can e.g. omit the quotation mark or the comma:
            |
            |### Example ###
            |<script src="https://gist.github.com/zookzook/56d91e7baed3464888a9b5985ab47aae.js"></script>
            |
            |Originally the HOCON format for configuration files was created in the Scala/Java world.
            |But it is a great way to describe data structures.
            |
            |## data structures and layout ##
            |
            |Typical static content generators have many templates, but in the end they can only
            |process one data structure at a time. This is in the nature of things: The text document has only
            |three or four elements, the actual content is described as a markdown block.
            |
            |Therefore, the layout contains only three or four elements and include the markdown block.
            |For example, if you want to position a list of images at the end of a paragraph, this would not be
            |possible without major adjustments to the layout and text document.
            |
            |1. Extension of the text document: List of images
            |2. Adjustments to the parser so that it can recognize the list of images
            |3. Adjustments to the layout, so that the images are positioned there
            |4. Modifications to the generator so that the list of images is processed and rendered with the layout.
            |
            |We can increase the complexity by using different page layouts (table of contents, detail pages, list of images).
            |Each page layout requires a different data structure. You would therefore have to make the above-mentioned adjustments
            |for each layout. We therefore state: The more complex a layout is, the more complex the necessary data structure.
            |
            |For this reason we use the HOCON format for the data structures. We can display any data structures that
            |are required for individual layouts. Once we have created our HOCON document, we can convert it into
            |a map with a [HOCON parser](https://hex.pm/packages/hocon):
            |
            |<script src="https://gist.github.com/zookzook/f5f59cb21aff3e3b7f60c51f2198ed55.js"></script>
            |
            |By using HOCON we are now able to design individual page layouts, whereby only two steps of the four
            |mentioned above are necessary:
            |
            |1. Extension of the HOCON document: List of images
            |2. Adjustments to the layout, so that the images are positioned there
            |
            |The remaining steps happen automatically.
            """
      images: [
      ]

    },
    {
      text: """
            |## Phoenix Web-Framework ##
            |
            |I'll show you how we create a boilerplate code that has all the necessary functions to get you started quickly.
            |This code is then ready for further adjustments and changes. First we create a Phoenix project without
            |database connection:
            |
            |```elixir
            |#> mix phx.new polaris --no-ecto
            |```
            |
            |We answer all questions with yes and can then start the server.
            |In the browser the well-known boilerplate page from Phoenix should now appear under 'http://localhost:4000':
            |
            """
      images: [
        {
          caption: "Welcome page"
          src: "/images/welcome.jpg"
        }
      ]
    },
    {
      text: """
            |You can find the whole project on [github](https://github.com/zookzook/polaris) and you can use it as simple boilerplate.
            |
            |To be able to read HOCON file, we add the `hocon package. We also want to use Markdown, so we add the well-known `earmark` package as well:
            |
            |```elixir
            | {:earmark, "~> 1.4"},
            | {:hocon, "~> 0.1.8"}
            |```
            |
            |and call `mix deps.get' to get the packages loaded.
            |
            |## Reading HOCON
            |
            |In this example I define a page with a directory depth of one layer:
            |
            |```
            |index.html
            |section-1/index.html
            |section-2/index.html
            |etc.
            |```
            |
            |When reading the text files in the HOCON format I would like to take this structure into account.
            |The text files are located in the hocon directory synchronously to the structure of the HTML pages.
            |For the structure of the web page we follow the concept `Convention over configuration`:
            |
            |```
            |index.conf
            |section-1/index.conf
            |section-2/index.conf
            |```
            |
            |We define an elixir structure that reflects these properties:
            |
            |<script src="https://gist.github.com/zookzook/11251ea46ec6ef7880b7a96013298e82.js"></script>
            |
            |This module reads a text document and creates the most important attributes.
            |* `:filename`, the filename of the hocon document
            |* `:section`, the section
            |* `:title`, the title of the page
            |* `:content`, the complete content of the HOCON file as a map
            |
            |It is important for our site management that we generate a unique key for each file.
            |In this case we use `:filename` in combination with `:section`. With `make_key` we can create the key
            |which we can later use to address the desired page in the `PageController`.
            |
            |## site management ##
            |
            |Now we come to the part of the program that contains the most magic. Elixir has a whole range of
            |interesting ways to interact during the compilation process. And we now use the
            |keyword `@external_resource` for our purposes: This tells us that this module depends on one or
            |more external files. As soon as these files change, the module is recompiled.
            |We will see how cool this property is when we call the following module:
            |
            |<script src="https://gist.github.com/zookzook/88963c93c32b4d940778533a493a663b.js"></script>
            |
            |In this module, `@pages` is created as a map with the external contents found
            |recursively in the HOCON directory. If a content changes, the module is recompiled.
            |Later we activate the reload mechanism of Phoenix and then every change in the HOCON files is automatically reloaded,
            |parsed and rendered!
            |
            """
      images: [
      ]
    },
    {
      text: """
            |Let's call the `Polaris.Site.all_pages/0` function:
            |
            |```
            |iex> Polaris.Site.all_pages()
            |%{
            |  "index.conf" => %Polaris.Page{
            |    content: %{
            |...
            |```
            |
            """
      images: []
    },
    {
      text: """
            |## Controller ##
            |
            |First we change the `PageController`. We get the `Page` structure for the desired page (here: `index`) and then render the page with the contents:
            |<script src="https://gist.github.com/zookzook/3e98ab94ec1f670ca4dd0d2b2f353fd3.js"></script>
            |
            |In the module `Polaris.Site` there is the function `index/0`, which returns us the page for `index.conf`.
            |Additionally, we define the list of paragraphs in the template for `@pars`.
            """
      images: []
    },
    {
      text: """
            |## Template ##
            |
            |Let's take a look at the templates. First we output the title
            |in `index.html.eex` and then we call the template `paragraph.html.eex` for each paragraph:
            |
            |<script src="https://gist.github.com/zookzook/0e7757ad13794251e51b29d8df272e9d.js"></script>
            |
            |For the paragraph we have a text attribute that contains Markdown content. And we can have a list of images
            |that we render after the text block in HTML:
            |
            |<script src="https://gist.github.com/zookzook/db894738a68e59cda5ef103ae8c1c62c.js"></script>
            |
            |With this example we see a strong relationship between layout and data structure. Layout and data structure
            |are interdependent. Complex layouts require the appropriate data structure so that the individual elements
            |can be addressed and rendered correctly. In this example we have a text block as a markdown and
            |a list of image references. Each image reference consists of two attributes
            |
            |* `src`
            |* `caption`
            |
            |The data structure is therefore as follows:
            |<script src="https://gist.github.com/zookzook/026e1da9c164138239413a465b1b8f7d.js"></script>
            |
            |The markdown texts contain a virtual left margin in the form of spaces and the pipe
            |symbol for better viewing. We will remove this margin with a function `strip_margin/1` before we
            |generate HTML from it.
            """
      images: []
    },
    {
      text: """
            |## View ##
            |
            |So that the call:
            |```
            |@paragraph["text"] |> markdown() |> raw()
            |```
            |works in the template, we add the necessary functions in the module `PageView`!
            |
            |<script src="https://gist.github.com/zookzook/7d41801ab7248a127742049c9169eca4.js"></script>
            |
            """
      images: []
    }
    {
      text: """
            |## Live Reloading ##
            |
            |In the file `config/dev.ex` we now add `~r"hocon/.*(conf)$"` as entry under `live_reload`:
            |
            |```
            |config :polaris, PolarisWeb.Endpoint,
            |  live_reload: [
            |    patterns: [
            |      ...
            |      ~r"hocon/.*(conf)$",
            |    ]
            |  ]
            |```
            |
            |With this we get a Live Reloading for the HOCON files. As soon as an existing file is changed,
            |the module `Polaris.Site` is recompiled and the page is reloaded in the browser.
            |Now you can enjoy live reloading as you write!
            |
            |If we now call up the browser again, we will see the content of `index.conf`:
            """
      images: [{
        src: /images/pic-5.png
        caption: "The start page now shows the contents of index.conf"
      }]
    }
    {
      text: """
            |## Render Content ##
            |
            |The last step is to create the static content so that it can be provided by a web server.
            |In the Phoenix framework, the assets are copied to the `priv/static` directory by webpack.
            |You should delete the directory there from time to time, otherwise already deleted resources will still be there.
            |
            |The creation of the HTML pages can be done with the help of the test modules from Phoenix.
            |Since we express the structure of the web page through the directory structure of the
            |HOCON files (Convention over Configuration), we can determine all necessary URLs through this convention.
            |
            |The module `Polaris.Site` has a function `get_urls/0` which returns all URLs.
            |
            |The generator creates the HTML pages from this list and saves them in a target directory:
            |
            |<script src="https://gist.github.com/zookzook/67abc428ae52202ad5951da477d00319.js"></script>
            |
            |In the configuration `config/config.ex` we define the target directory:
            |```
            |config :polaris, :generator,
            |  out: Path.relative_to_cwd("site")
            |```
            |
            |The generation takes place in three steps:
            |1. First the target directory is cleaned up or created.
            |2. With `rsync` the asserts are copied to the target directory (`cp` would work if necessary)
            |3. HTML file are created and copied to the target directory.
            |
            |If we call up the generator, we get the following output:
            |
            |```
            |GET index.html
            |[debug] Processing with PolarisWeb.PageController.index/2
            |  Parameters: %{}
            |  Pipelines: [:browser]
            |[info] Sent 200 in 13ms
            |[ok: "index.html"]
            |```
            |And in the target directory is now our complete web page:
            |```
            |#> cd /tmp/site
            |#> ls
            |css         favicon.ico images      index.html  js          robots.txt
            |```
            |
            |Now the file can be transferred to the web server. As a test, you can
            |start a docker container, for example, and thus check the web page
            |whether all resources are available and the links work:
            |
            |```
            |#> docker run --rm --name polaris -p 8080:80 -v "$PWD/site":/usr/local/apache2/htdocs/ httpd:2.4
            |```
            """
      images: [
        {
          caption: "The index file served by apache container"
          src: /images/pic-6.png
        }
      ]
    },
    {
      text: """
            |## Conclusion ##
            |With a few simple steps we have now created a static content generator.
            |The best thing about it is that we can deploy the Phoenix application as a standalone
            |application at any time and thus supplement the static pages with dynamic pages.
            |
            |See [Example](/example/lofoten.html) for an example with a two columns layout mixed with text elements and
            |images.
            |
            |## References ##
            |
            |* [dashbit.co](https://dashbit.co/blog/welcome-to-our-blog-how-it-was-made) Live-Reloading and `@external_resource`
            |* [HOCON](https://hex.pm/packages/hocon), an Elixir parser for HOCON
            |* [Earmark](https://hex.pm/packages/earmark), a pure-Elixir Markdown converter
            """
      images: []
    },

  ]
}
